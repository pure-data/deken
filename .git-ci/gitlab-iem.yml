# iem-ci configuration for deken
stages:
  - build
  - test
  - release
  - deploy

variables:
 CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
 CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
 GIT_SUBMODULE_STRATEGY: normal
 PYTHON: python3
 PIPFLAGS: ""


.build_script: &build_script
  script:
    - export DEKEN_VERSION=$(git describe --always)
    - ${PYTHON} -m pip install --upgrade pip
    - ${PYTHON} -m pip install ${PIPFLAGS} -r developer/requirements.txt
    - ${PYTHON} -m pip install ${PIPFLAGS} pyinstaller
    - for d in ~/Library/Python/*/bin; do test -d "${d}" && PATH=${PATH}:${d}; done || true
    - echo $PATH
    - (cd developer; pyinstaller deken.spec)

osx:
  tags:
    - osx
  variables:
    PIPFLAGS: --user
  stage: build
  before_script:
    - ${PYTHON} --version || brew bundle --no-upgrade --file=.git-ci/requirements.brew
    - sudo chown -R $(whoami) /usr/local/ || echo "continuing without owning /usr/local"
  <<: *build_script
  after_script:
    - cp developer/dist/deken .
  artifacts:
    name: deken
    paths:
      - deken
    expire_in: 1 week

windows:
  allow_failure: true
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: python3
    PYTHON: /c/Python38/python
  stage: build
  before_script:
    - ${PYTHON} --version && true
  <<: *build_script
  after_script:
    - cp developer/dist/deken.exe .
  artifacts:
    name: deken
    paths:
      - deken.exe
    expire_in: 1 week

# =====================================================================
# docker images
# =====================================================================

.docker:
  before_script:
    - date
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker info
    - docker images
  after_script:
    - docker images
    - docker logout $CI_REGISTRY
  tags:
    - docker-builder
  
docker-build:
  stage: build
  extends:
    - .docker
  script:
    - ./.git-ci/git-version
    - docker build -t $CONTAINER_TEST_IMAGE developer
    - docker push $CONTAINER_TEST_IMAGE

docker-release:
  stage: release
  extends:
    - .docker
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  only:
    - tags

# =====================================================================
# deken package
# =====================================================================
deken:
  stage: release
  image: $CONTAINER_TEST_IMAGE
  variables:
    DEKEN_ROOT: "yes"
  script:
# create source package
    - export DEKEN_VERSION=$(git describe --always)
    - mkdir deken-plugin
    - cp deken-plugin.tcl LICENSE.txt deken-plugin/
    - cp README.plugin.txt deken-plugin/README.txt
    - deken package --version="${DEKEN_VERSION#v}" deken-plugin
# upload deken packages
    - test -z "${CI_COMMIT_TAG}" || test -z "${DEKEN_USERNAME}" || test -z "${DEKEN_PASSWORD}" || deken upload --no-source-error ./*.dek
  artifacts:
    name: deken-package
    paths:
      - ./*.dek
