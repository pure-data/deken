# iem-ci configuration for deken

################################
# jobs
#
# build::windows, build::osx -- create standalone 'deken' cmdline-utilities
# build::docker-build        -- create a docker-container with the 'deken'
#                               cmdline utility ready to be used
# test::docker-test          -- test the docker-container by using it to
#                               create and upload a 'deken-test' package
# test::windows-test         -- test the Windows binaries by using it to
#                               create and upload a 'deken-test' package
# test::osx-test             -- test the macOS binaries by using it to
#                               create and upload a 'deken-test' package
# release::docker-release    -- tag the docker-container as 'latest'
# deploy::upload2deken       -- create a 'deken-plugin' package
#                               upload the package if this is a tagged release

stages:
  - build
  - test
  - release
  - deploy

variables:
 CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
 CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
 GIT_SUBMODULE_STRATEGY: normal
 PYTHON: python3
 PIPFLAGS: ""

.build_script: &build_script
  script:
    - export DEKEN_VERSION=$(.git-ci/git-version)
    - echo "${DEKEN_VERSION}"
    - ${PYTHON} -m pip install --upgrade pip
    - ${PYTHON} -m pip install ${PIPFLAGS} -r developer/requirements.txt
    - ${PYTHON} -m pip install ${PIPFLAGS} pyinstaller~=5.0
    - for d in ~/Library/Python/*/bin; do test -d "${d}" && PATH=${PATH}:${d}; done || true
    - echo $PATH
    - (cd developer; pyinstaller deken.spec)

.deken-test:
  stage: test
  variables:
    DEKEN_EXE: ./deken
    DEKEN_TEST: XXX-deken-test
  allow_failure:
    exit_codes:
      - 75
  script:
    - ${DEKEN_EXE} -v systeminfo
    - export DEKEN_VERSION=$(${DEKEN_EXE} --version)
    - echo "${DEKEN_VERSION}"
    - PKGVERSION="${DEKEN_VERSION#v}_${CI_JOB_NAME%-test}"
    - echo "${PKGVERSION}"
    - rm -rf .git-ci/tmp/ && mkdir -p .git-ci/tmp/
    - mv .git-ci/deken-test .git-ci/tmp/${DEKEN_TEST}
      # check whether renaming working
    - ${DEKEN_EXE} -v package --no-sign-gpg --version="${PKGVERSION}" --name "decken-test" ".git-ci/tmp/${DEKEN_TEST}"
    - find . -maxdepth 1 "(" -name "*.dek" -or -name "*.dek.*" ")" -print -delete
      # check whether automatic names work
    - ${DEKEN_EXE} -v package --no-sign-gpg --version="${PKGVERSION}" ".git-ci/tmp/${DEKEN_TEST}"
    - find . -maxdepth 1 "(" -name "*.dek" -or -name "*.dek.*" ")" -print
      # remove floatsize=0 packages, in case they were wrongly created...
    - find . -maxdepth 1 -name "*.dek" -name "*-0)*" -print -delete
      # upload the deken-test package
    - test -z "${DEKEN_USERNAME}" || test -z "${DEKEN_PASSWORD}" || ${DEKEN_EXE} -v upload --destination "/Members/%u/software/%p/${CI_DEKEN_PIPELINE}/%v" --no-sign-gpg --no-source-error ./*.dek
      # test installing/uninstalling the package
    - ${DEKEN_EXE} -v install *.dek
    - ${DEKEN_EXE} -v uninstall "${DEKEN_TEST}"
      # test finding the package (so we can then download it)
    - starttime=$(date +%s)
    - endtime=$((starttime+180))
    - while ! ${DEKEN_EXE} -v find --architecture="*"  "${DEKEN_TEST}==${PKGVERSION}" | grep .; do if [ ${endtime} -lt $(date +%s) ]; then exit 75; fi; sleep 5; echo "try again"; done
    - echo $(($(date +%s) - starttime))
      # test downloading the package
    - rm -rf .git-ci/tmp/ && mkdir -p .git-ci/tmp/
    - ${DEKEN_EXE} -v download --ignore-missing-gpg --download-dir=.git-ci/tmp/ --architecture="*" "${DEKEN_TEST}==${PKGVERSION}"
    - ls -lha .git-ci/tmp/
      # test installing/uninstalling the package (from remote; into extra installation directory))
    - rm -rf .git-ci/tmp/ && mkdir -p .git-ci/tmp/
    - ${DEKEN_EXE} -v install  --ignore-missing-gpg --install-dir=.git-ci/tmp/  --architecture="*" "${DEKEN_TEST}==${PKGVERSION}"
    - ls -lha .git-ci/tmp/
    - ${DEKEN_EXE} -v uninstall --install-dir=.git-ci/tmp/ "${DEKEN_TEST}"
    - ls -lha .git-ci/tmp/

fetch-testdata:
  stage: build
  image: alpine
  script:
    - mkdir -p .git-ci/deken-test
    - wget -O externals.tgz https://git.iem.at/pd/deken/-/package_files/5/download
    - tar -f externals.tgz -C .git-ci/deken-test/ -xv
  artifacts:
    name: deken-test
    paths:
      - .git-ci/deken-test/
    expire_in: 1 week

osx:
  tags:
    - osx
  variables:
    PIPFLAGS: --user
  stage: build
  before_script:
    - ${PYTHON} --version || brew bundle --no-upgrade --file=.git-ci/requirements.brew
    - sudo chown -R $(whoami) /usr/local/ || echo "continuing without owning /usr/local"
  <<: *build_script
  after_script:
    - cp developer/dist/deken .
  artifacts:
    name: deken
    paths:
      - deken

osx-test:
  extends:
    - .deken-test
  tags:
    - osx
  dependencies:
    - osx
    - fetch-testdata
  needs:
    - osx
    - fetch-testdata

windows:
  allow_failure: true
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: python3
    PYTHON: /c/Python38/python
  stage: build
  before_script:
    - ${PYTHON} --version && true
  <<: *build_script
  after_script:
    - cp developer/dist/deken.exe .
  artifacts:
    name: deken
    paths:
      - deken.exe

windows-test:
  extends:
    - .deken-test
  tags:
    - windows
  dependencies:
    - windows
    - fetch-testdata
  needs:
    - windows
    - fetch-testdata

# =====================================================================
# docker images
# =====================================================================

.docker:
  dependencies: []
  before_script:
    - date
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker info
    - docker images
  after_script:
    - docker images
    - docker logout $CI_REGISTRY
  tags:
    - docker-builder
  
docker-build:
  stage: build
  extends:
    - .docker
  script:
    - git fetch --unshallow || true
    - ./.git-ci/git-version
    - docker build -t $CONTAINER_TEST_IMAGE developer
    - docker push $CONTAINER_TEST_IMAGE

docker-test:
  extends:
    - .deken-test
  image: $CONTAINER_TEST_IMAGE
  variables:
    DEKEN_EXE: deken
  dependencies:
    - fetch-testdata
  needs:
    - fetch-testdata
    - docker-build

docker-release:
  stage: release
  extends:
    - .docker
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  only:
    - tags

# =====================================================================
# deken package
# =====================================================================
upload2deken:
  stage: deploy
  image: $CONTAINER_TEST_IMAGE
  dependencies: []
  script:
# create source package
    - deken systeminfo
    - export DEKEN_VERSION=$(deken --version)
    - .git-ci/git-version "${DEKEN_VERSION}"
    - mkdir deken-plugin
    - cp deken-plugin.tcl LICENSE.txt README.deken.pd deken-plugin/
    - cp README.plugin.txt deken-plugin/README.txt
    - deken package --version="${DEKEN_VERSION#v}" deken-plugin
    - find . -maxdepth 1 -name "*.dek*"
# upload deken packages
    - test -z "${CI_COMMIT_TAG}" || test -z "${DEKEN_USERNAME}" || test -z "${DEKEN_PASSWORD}" || deken upload --no-source-error ./*.dek
  artifacts:
    name: deken-package
    paths:
      - ./*.dek

cleanup-testdata:
  extends:
    - .deken-test
  stage: deploy
  image: curlimages/curl
  dependencies: []
  script:
    - echo "https://puredata.info/Members/${DEKEN_USERNAME}/software/${DEKEN_TEST}/${CI_PIPELINE_ID}"
    - curl -X DELETE --user "${DEKEN_USERNAME}:${DEKEN_PASSWORD}" https://puredata.info/Members/${DEKEN_USERNAME}/software/XXX-deken-test --anyauth
